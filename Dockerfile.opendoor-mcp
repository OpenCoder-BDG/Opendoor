# All-in-One MCP Server - Everything in One Container
FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Set environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    LOG_LEVEL=info \
    REDIS_URL=redis://localhost:6379 \
    MAX_CONCURRENT_EXECUTIONS=10 \
    RATE_LIMIT_POINTS=100 \
    SESSION_TIMEOUT_HOURS=24

# Install system dependencies and languages
RUN apt-get update && apt-get install -y \
    # Basic tools
    curl \
    wget \
    git \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    supervisor \
    nginx \
    # Build tools
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    # Python
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    # Java
    openjdk-17-jdk \
    maven \
    gradle \
    # C/C++
    clang \
    # Other languages
    php \
    perl \
    ruby \
    lua5.3 \
    golang-go \
    # Redis
    redis-server \
    # Browser dependencies for Playwright
    libnss3 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    libxshmfence1 \
    # VS Code dependencies
    libx11-6 \
    libxkbfile1 \
    libsecret-1-0 \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"

# Install Swift (for Linux)
RUN wget https://download.swift.org/swift-5.9-release/ubuntu2204/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu22.04.tar.gz \
    && tar xzf swift-5.9-RELEASE-ubuntu22.04.tar.gz -C /opt \
    && ln -s /opt/swift-5.9-RELEASE-ubuntu22.04/usr/bin/swift /usr/local/bin/swift \
    && rm swift-5.9-RELEASE-ubuntu22.04.tar.gz

# Install .NET
RUN wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \
    && dpkg -i packages-microsoft-prod.deb \
    && apt-get update \
    && apt-get install -y dotnet-sdk-8.0 \
    && rm packages-microsoft-prod.deb

# Install common Python packages
RUN pip3 install --no-cache-dir \
    requests \
    numpy \
    pandas \
    matplotlib \
    seaborn \
    scikit-learn \
    jupyter \
    plotly \
    beautifulsoup4 \
    lxml \
    openpyxl \
    pillow \
    python-dateutil \
    pytz \
    flask \
    fastapi \
    django \
    pytest \
    # Playwright for Python
    playwright

# Install global npm packages
RUN npm install -g \
    pnpm \
    typescript \
    ts-node \
    @types/node \
    lodash \
    axios \
    moment \
    uuid \
    cheerio \
    csv-parser \
    express \
    # Playwright for Node.js
    playwright \
    @playwright/test

# Install VS Code Server
RUN curl -fsSL https://code-server.dev/install.sh | sh

# Install Playwright browsers
RUN playwright install chromium firefox webkit
RUN npx playwright install chromium firefox webkit

# Create app directory and user
RUN groupadd -g 1001 mcpuser && useradd -u 1001 -g mcpuser -m -s /bin/bash mcpuser
WORKDIR /app

# Copy MCP server source
COPY mcp-server/package*.json ./
COPY mcp-server/pnpm-lock.yaml ./
COPY mcp-server/tsconfig.json ./

# Install MCP server dependencies
RUN pnpm install --prod

# Copy MCP server source code
COPY mcp-server/src ./src

# Build MCP server
RUN pnpm run build

# Create necessary directories
RUN mkdir -p /app/logs /app/sessions /app/workspaces /var/log/supervisor \
    && chown -R mcpuser:mcpuser /app \
    && chmod 755 /app/sessions /app/workspaces

# Copy configuration files
COPY scripts/all-in-one/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY scripts/all-in-one/nginx.conf /etc/nginx/sites-available/default
COPY scripts/all-in-one/redis.conf /etc/redis/redis.conf
COPY scripts/all-in-one/start.sh /usr/local/bin/start.sh

# Make start script executable
RUN chmod +x /usr/local/bin/start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expose ports
EXPOSE 3000 8080 6379

# Start everything with supervisor
CMD ["/usr/local/bin/start.sh"]
